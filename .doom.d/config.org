#+TITLE: Config
#+AUTHOR: Sasank Kalipatnapu
#+OPTIONS: overview

* Personal Information
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
#+BEGIN_SRC elisp
(setq user-full-name "Sasank Kalipatnapu"
      user-mail-address "ksasank@gmail.com")
#+END_SRC

* Appearance
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:

#+begin_src elisp
(setq doom-font (font-spec :family "monospace" :size 18 :weight 'semi-light)
       doom-variable-pitch-font (font-spec :family "sans" :size 19))
#+end_src
;;(setq doom-font (font-spec :family "Source Code Pro" :size 14 :weight 'regular)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;;(setq doom-font (font-spec :family "Ubuntu Mono" :size 14 :weight 'regular)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))


;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
#+BEGIN_SRC elisp
(setq doom-theme 'doom-one)
;;(setq doom-theme 'doom-solarized-dark)
;;(setq doom-theme 'doom-dracula)
;;(setq doom-theme 'doom-solarized-light)
#+END_SRC

* ORG Mode
#+BEGIN_SRC elisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Dropbox/Notes/")

;; Sets the default org-capture file. Should be interpreted relative to org-directory
(setq org-default-notes-file "inbox.org")
#+END_SRC

* ORG-ROAM, org-journal & Deft Stuff
#+BEGIN_SRC elisp
;; Setting org-roam directory
(setq org-roam-directory "~/Dropbox/Notes/literature/")
(setq org-roam-index-file "index.org")

;; setting custom keybindings
(after! org-roam
        (map! :leader
            :prefix "n"
            :desc "org-roam" "l" #'org-roam
            :desc "org-roam-insert" "i" #'org-roam-insert
            :desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
            :desc "org-roam-find-file" "f" #'org-roam-find-file
            :desc "org-roam-show-graph" "g" #'org-roam-show-graph
            :desc "org-roam-insert" "i" #'org-roam-insert
            :desc "org-roam-capture" "c" #'org-roam-capture))

;; setting up org-journal to get daily note function as Roam Research
(use-package org-journal
      :bind
      ("C-c n j" . org-journal-new-entry)
      :custom
      (org-journal-dir "~/Dropbox/Notes/literature/")
      (org-journal-date-prefix "#+TITLE: ")
      (org-journal-file-format "%Y-%m-%d.org")
      (org-journal-date-format "%A, %d %B %Y"))
    (setq org-journal-enable-agenda-integration t)

;; Using deft to navigate and search through files
(use-package deft
      :after org
      :bind
      ("C-c n d" . deft)
      :custom
      (deft-recursive t)
      (deft-use-filter-string-for-filename t)
      (deft-default-extension "org")
      (deft-directory "~/Dropbox/Notes/"))
#+END_SRC

* ORG-REF Stuff
#+BEGIN_SRC elisp
(setq reftex-default-bibliography '("~/Dropbox/Notes/references.bib"))

(setq org-ref-bibliography-notes "~/Dropbox/Notes/references.org"
      org-ref-default-bibliography '("~/Dropbox/Notes/references.bib")
      org-ref-pdf-directory "~/Dropbox/Notes/bibtex-pdfs/")

(setq bibtex-completion-bibliography "~/Dropbox/Notes/references.bib"
      bibtex-completion-library-path "~/Dropbox/Notes/bibtex-pdfs"
      bibtex-completion-notes-path "~/Dropbox/Notes/references.org")
#+END_SRC

* ESS-R Stuff
#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
 '(python . t)
 '(latex . t)
 '(gnuplot . t)
 '(shell . t)))
#+END_SRC

* Org-bibtex stuff
#+BEGIN_SRC elisp
;; manage citations
;;(require 'org-bibtex)

;; export citations
(require 'ox-bibtex)                    ;; this is in contrib
(setq org-bibtex-file "~/Dropbox/Notes/references.org") ;; used to resolve cite links
#+END_SRC

* Miscellaneous Stuff
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC elisp
(setq display-line-numbers-type t)
#+END_SRC

* mu4e Stuff
mu4e is an email client within emacs. But, primarily it is an email indexing program 'mu' built within the main operating system.

You must install *mu* first (which automatically installs mu4e) and mbsync/isync/imapmail through your Linux distribution’s package manager.
Setting up smtp for sending mail. Make sure the gnutls command line utils are installed. Package ‘gnutls-bin’ in Debian/Ubuntu, and ‘gnutls’ in Arch.

#+BEGIN_SRC elisp
;; For emacs to find the source of mu4e,as I built from source
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")

(setq mu4e-maildir "~/.local/share/mail"
      mu4e-get-mail-command "mbsync -a"
      ;; mu4e-update-interval 300 ;; Fetch emails every 5 minutes
      )
;; Each path is relative to `+mu4e-mu4e-mail-path', which is ~/.mail by default
(set-email-account! "ksasank-gmail"
  '((mu4e-sent-folder       . "/ksasank-gmail/Sent Mail")
    (mu4e-drafts-folder     . "/ksasank-gmail/Drafts")
    (mu4e-trash-folder      . "/ksasank-gmail/Trash")
    (mu4e-refile-folder     . "/ksasank-gmail/All Mail")
    (smtpmail-smtp-user     . "ksasank@gmail.com")
    (user-mail-address      . "ksasank@gmail.com")    ;; only needed for mu < 1.4
    (mu4e-compose-signature . "---\nSasank Kalipatnapu"))
  t)

;; To store org-mode links to messages
(require 'org-mu4e)
;;store link to message if in header view, not to header query
(setq org-mu4e-link-query-in-headers-mode nil)

;; Prevent gmail from showing duplicates in searches
(setq mu4e-headers-skip-duplicates t
      mu4e-headers-include-related t)
#+END_SRC

* Additional stuff
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

* Org-Noter stuff
org-noter is a good package for note taking and annotating pdf files.

#+BEGIN_SRC elisp
(setq org-noter-default-notes-file-names '("~/Dropbox/Notes/references.org"))
(setq org-noter-notes-search-path '("~/Dropbox/Notes"))
#+END_SRC

* org-tree-slide stuff

#+begin_src elisp
(after! org-tree-slide
  (setq org-tree-slide-skip-outline-level 1))
#+end_src
